//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-661 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.05.27 at 04:06:26 PM PDT 
//


package ebay.apis.eblbasecomponents;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MessageTypeCodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MessageTypeCodeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="AskSellerQuestion"/>
 *     &lt;enumeration value="ResponseToASQQuestion"/>
 *     &lt;enumeration value="ContactEbayMember"/>
 *     &lt;enumeration value="ContactTransactionPartner"/>
 *     &lt;enumeration value="ResponseToContacteBayMember"/>
 *     &lt;enumeration value="ContacteBayMemberViaCommunityLink"/>
 *     &lt;enumeration value="CustomCode"/>
 *     &lt;enumeration value="All"/>
 *     &lt;enumeration value="ContactMyBidder"/>
 *     &lt;enumeration value="ContacteBayMemberViaAnonymousEmail"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "MessageTypeCodeType")
@XmlEnum
public enum MessageTypeCodeType {


    /**
     * 
     *             Member to Member message initiated by bidder/potential bidder
     *             to a seller of a particular item.
     *           
     * 
     */
    @XmlEnumValue("AskSellerQuestion")
    ASK_SELLER_QUESTION("AskSellerQuestion"),

    /**
     * 
     *             Member to Member message initiated as a response
     *             to an Ask A Question message.
     *           
     * 
     */
    @XmlEnumValue("ResponseToASQQuestion")
    RESPONSE_TO_ASQ_QUESTION("ResponseToASQQuestion"),

    /**
     * 
     *             Member to Member message initiated by any eBay member
     *             to another eBay member.
     *           
     * 
     */
    @XmlEnumValue("ContactEbayMember")
    CONTACT_EBAY_MEMBER("ContactEbayMember"),

    /**
     * 
     *             Member message between transaction partners within 90 days
     *             after the transaction.
     *           
     * 
     */
    @XmlEnumValue("ContactTransactionPartner")
    CONTACT_TRANSACTION_PARTNER("ContactTransactionPartner"),

    /**
     * 
     *             Member to Member message initiated as a response
     *             to a Contact eBay Member message.
     *           
     * 
     */
    @XmlEnumValue("ResponseToContacteBayMember")
    RESPONSE_TO_CONTACTE_BAY_MEMBER("ResponseToContacteBayMember"),

    /**
     * 
     *             Member to Member message initiated by any eBay member
     *             to another eBay member who has posted on a community forum
     *             within the past 7 days.
     *           
     * 
     */
    @XmlEnumValue("ContacteBayMemberViaCommunityLink")
    CONTACTE_BAY_MEMBER_VIA_COMMUNITY_LINK("ContacteBayMemberViaCommunityLink"),

    /**
     * 
     *             Reserved for future or internal use.
     *           
     * 
     */
    @XmlEnumValue("CustomCode")
    CUSTOM_CODE("CustomCode"),

    /**
     * 
     *             All message types.
     *           
     * 
     */
    @XmlEnumValue("All")
    ALL("All"),

    /**
     * 
     *             Member to Member message initiated by sellers to their
     *             bidders during an active listing.
     *           
     * 
     */
    @XmlEnumValue("ContactMyBidder")
    CONTACT_MY_BIDDER("ContactMyBidder"),

    /**
     * 
     *             Member message initiated after eBay receives an email sent by an
     *             eBay member's email client to another eBay member.
     *           
     * 
     */
    @XmlEnumValue("ContacteBayMemberViaAnonymousEmail")
    CONTACTE_BAY_MEMBER_VIA_ANONYMOUS_EMAIL("ContacteBayMemberViaAnonymousEmail");
    private final String value;

    MessageTypeCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MessageTypeCodeType fromValue(String v) {
        for (MessageTypeCodeType c: MessageTypeCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
